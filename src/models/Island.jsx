/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: Warkarma (https://sketchfab.com/warkarma)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/cabriolet-from-the-concept-6efbbf91583d420fac26038349b1c596
Title: Cabriolet from the concept
*/

import { useRef, useEffect } from "react";
import { useGLTF } from "@react-three/drei";
import {useFrame, useThree} from '@react-three/fiber';
import islandScene from '../assets/3d/desert_road.glb';
import {a} from '@react-spring/three';

const Island = ({isRotating, setIsRotating, ...props}) => {
  const { nodes, materials } = useGLTF(islandScene);
  const {gl, viewport} = useThree();
  const islandRef = useRef();


  const lastX = useRef(0);
  const rotationSpeed = useRef(0);
  const dampingFactor = 0.95;

  const handlePointerDown = (e) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(true);

    const clientX = e.touches 
    ? e.touches[0].clientX
    : e.clientX;

    lastX.current = clientX;
  }

  const handlePointerUp = (e) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(false);

    
  }
  const handlePointerMove = (e) => {
    e.stopPropagation();
    e.preventDefault();

    if(isRotating) {
      const clientX = e.touches 
    ? e.touches[0].clientX
    : e.clientX;

    const delta = (clientX - lastX.current) / viewport.width;

    islandRef.current.rotation.y += delta * 0.01 * Math.PI;
    lastX.current = clientX;
    rotationSpeed.current = delta * 0.01 * Math.PI;
    }
  }

  const handleKeyDown = (e) => {
    if(e.key === 'ArrowLeft'){
      if(!isRotating) setIsRotating(true);
      islandRef.current.rotation.y += 0.01 * Math.PI;
  } else if(e.key === 'ArrowRight') {
    if(!isRotating) setIsRotating(true);
    islandRef.current.rotation.y -= 0.01 * Math.PI;
  }
}

const handleKeyUp = (e) => {
  if(e.key === 'ArrowLeft' || e.key === 'ArrowRight') {
    setIsRotating(false);
  }
}

useFrame(() => {
  if(!isRotating) {
    rotationSpeed.current *= dampingFactor;

    if(Math.abs(rotationSpeed.current) < 0.001) {
      rotationSpeed.current = 0;
    }
  } else {
    const rotation = islandRef.current.rotation.y;

    const normalizedRotation =
        ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);

      // Set the current stage based on the island's orientation
      switch (true) {
        case normalizedRotation >= 5.45 && normalizedRotation <= 5.85:
          setCurrentStage(4);
          break;
        case normalizedRotation >= 0.85 && normalizedRotation <= 1.3:
          setCurrentStage(3);
          break;
        case normalizedRotation >= 2.4 && normalizedRotation <= 2.6:
          setCurrentStage(2);
          break;
        case normalizedRotation >= 4.25 && normalizedRotation <= 4.75:
          setCurrentStage(1);
          break;
        default:
          setCurrentStage(null);
      }
  }
})

  useEffect(() => {
    const canvas = gl.domElement;
    canvas.addEventListener('pointerdown', handlePointerDown);
    canvas.addEventListener('pointerup', handlePointerUp);
    canvas.addEventListener('pointermove', handlePointerMove);
    document.addEventListener('keydown', handleKeyDown);
    document.addEventListener('keyup', handleKeyUp);

    return () => {
      canvas.removeEventListener('pointerdown', handlePointerDown);
      canvas.removeEventListener('pointerup', handlePointerUp);
      canvas.removeEventListener('pointermove', handlePointerMove);
      document.removeEventListener('keydown', handleKeyDown);
      document.removeEventListener('keyup', handleKeyUp);
    }

  }, [gl, viewport, handlePointerDown, handlePointerUp, handlePointerMove]);

  return (
    <a.group {...props} ref={islandRef}>
      <a.group scale={0.01}>
        <a.group
          position={[-43.282, 284.869, 0.712]}
          rotation={[-Math.PI / 2, 0, 0]}
        >
          <mesh
            geometry={nodes.body_body_0.geometry}
            material={materials.body}
          />
          <mesh
            geometry={nodes.body_body_0_1.geometry}
            material={materials.body}
          />
        </a.group>
        <a.group
          position={[-42.467, 109.268, 3.732]}
          rotation={[-Math.PI / 2, 0, 0]}
        >
          <mesh
            geometry={nodes.terrain_terrain_0.geometry}
            material={materials.terrain}
          />
          <mesh
            geometry={nodes.terrain_terrain_0_1.geometry}
            material={materials.terrain}
          />
        </a.group>
        <a.group
          position={[-43.282, 284.869, 0.712]}
          rotation={[-Math.PI / 2, 0, 0]}
        >
          <mesh
            geometry={nodes.body001outline_body001outline_0.geometry}
            material={materials.body001outline}
          />
          <mesh
            geometry={nodes.body001outline_body001outline_0_1.geometry}
            material={materials.body001outline}
          />
        </a.group>
        <a.group
          position={[-42.467, 109.268, 3.732]}
          rotation={[-Math.PI / 2, 0, 0]}
        >
          <mesh
            geometry={nodes.terrain001outline_terrain001outline_0.geometry}
            material={materials.terrain001outline}
          />
          <mesh
            geometry={nodes.terrain001outline_terrain001outline_0_1.geometry}
            material={materials.terrain001outline}
          />
        </a.group>
        <mesh
          geometry={nodes.sky_sky_0.geometry}
          material={materials.material}
          position={[-43.282, 284.869, 0.712]}
          rotation={[-Math.PI / 2, 0, 0]}
        />
        <mesh
          geometry={nodes.glass_glass_0.geometry}
          material={materials.glass}
          position={[-43.282, 284.869, 0.712]}
          rotation={[-Math.PI / 2, 0, 0]}
        />
        <mesh
          geometry={nodes.Object001_terrain001outline_0.geometry}
          material={materials.terrain001outline}
          position={[-42.467, 109.268, 3.732]}
          rotation={[-Math.PI / 2, 0, 0]}
        />
      </a.group>
    </a.group>
  );
}

useGLTF.preload(islandScene);

export default Island;
